// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_XE8ejOQhPaA9@ep-soft-credit-adcp8qin-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product Management
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  price       Float
  costPrice   Float?
  stock       Int      @default(0)
  lowStock    Int      @default(10)
  image       String?  // Primary image URL
  status      ProductStatus @default(ACTIVE)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  variants    ProductVariant[]
  images      ProductImage[]

  @@map("products")
}

model ProductImage {
  id        String @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int    @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String @id @default(cuid())
  productId String
  name      String // e.g., "Size", "Color"
  value     String // e.g., "Large", "Red"
  price     Float? // Optional price override
  stock     Int    @default(0)
  sku       String @unique

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Customer Management
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  birthDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]

  @@map("customers")
}

model Address {
  id         String  @id @default(cuid())
  customerId String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  zipCode    String
  country    String
  isDefault  Boolean @default(false)

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders   Order[]

  @@map("addresses")
}

// Order Management
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String?
  userId          String?     // For logged-in users
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingStatus  ShippingStatus @default(NOT_SHIPPED)
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  discount        Float       @default(0)
  total           Float
  currency        String      @default("USD")
  notes           String?
  shippingAddressId String?
  billingAddressId  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  customer        Customer?   @relation(fields: [customerId], references: [id])
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float  // Price at time of order
  total     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  transactionId   String?
  gatewayResponse String?       // JSON response from payment gateway
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Analytics and Reporting
model SalesMetric {
  id          String   @id @default(cuid())
  date        DateTime
  revenue     Float
  orders      Int
  customers   Int
  avgOrderValue Float
  createdAt   DateTime @default(now())

  @@unique([date])
  @@map("sales_metrics")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
}
